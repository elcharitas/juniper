warning: unused variable: `obj`
  --> fail/subscription/argument_non_input_type.rs:17:24
   |
17 |     async fn id(&self, obj: ObjA) -> BoxStream<'static, &'static str> {
   |                        ^^^ help: if this is intentional, prefix it with an underscore: `_obj`
   |
   = note: `#[warn(unused_variables)]` on by default

error[E0277]: the trait bound `ObjA: IsInputType<__S>` is not satisfied
  --> fail/subscription/argument_non_input_type.rs:17:29
   |
17 |     async fn id(&self, obj: ObjA) -> BoxStream<'static, &'static str> {
   |                             ^^^^ the trait `IsInputType<__S>` is not implemented for `ObjA`
   |
   = help: the following other types implement trait `IsInputType<S>`:
             `&T` implements `IsInputType<S>`
             `Arc<T>` implements `IsInputType<S>`
             `Box<T>` implements `IsInputType<S>`
             `ID` implements `IsInputType<__S>`
             `TypeKind` implements `IsInputType<__S>`
             `Vec<T>` implements `IsInputType<S>`
             `[T; N]` implements `IsInputType<S>`
             `[T]` implements `IsInputType<S>`
           and $N others

error[E0277]: the trait bound `ObjA: FromInputValue<__S>` is not satisfied
  --> fail/subscription/argument_non_input_type.rs:17:29
   |
15 | #[graphql_subscription]
   | ----------------------- required by a bound introduced by this call
16 | impl ObjB {
17 |     async fn id(&self, obj: ObjA) -> BoxStream<'static, &'static str> {
   |                             ^^^^ the trait `FromInputValue<__S>` is not implemented for `ObjA`
   |
   = help: the following other types implement trait `FromInputValue<S>`:
             `Arc<T>` implements `FromInputValue<S>`
             `Box<T>` implements `FromInputValue<S>`
             `ID` implements `FromInputValue<__S>`
             `TypeKind` implements `FromInputValue<__S>`
             `Vec<T>` implements `FromInputValue<S>`
             `[T; N]` implements `FromInputValue<S>`
             `bool` implements `FromInputValue<__S>`
             `f64` implements `FromInputValue<__S>`
           and $N others
note: required by a bound in `Registry::<'r, S>::arg`
  --> $WORKSPACE/juniper/src/executor/mod.rs
   |
   |     pub fn arg<T>(&mut self, name: &str, info: &T::TypeInfo) -> Argument<'r, S>
   |            --- required by a bound in this associated function
   |     where
   |         T: GraphQLType<S> + FromInputValue<S>,
   |                             ^^^^^^^^^^^^^^^^^ required by this bound in `Registry::<'r, S>::arg`

error[E0277]: the trait bound `ObjA: FromInputValue<__S>` is not satisfied
  --> fail/subscription/argument_non_input_type.rs:15:1
   |
15 | #[graphql_subscription]
   | ^^^^^^^^^^^^^^^^^^^^^^^ the trait `FromInputValue<__S>` is not implemented for `ObjA`
   |
   = help: the following other types implement trait `FromInputValue<S>`:
             `Arc<T>` implements `FromInputValue<S>`
             `Box<T>` implements `FromInputValue<S>`
             `ID` implements `FromInputValue<__S>`
             `TypeKind` implements `FromInputValue<__S>`
             `Vec<T>` implements `FromInputValue<S>`
             `[T; N]` implements `FromInputValue<S>`
             `bool` implements `FromInputValue<__S>`
             `f64` implements `FromInputValue<__S>`
           and $N others
   = note: this error originates in the attribute macro `graphql_subscription` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ObjA: FromInputValue<__S>` is not satisfied
  --> fail/subscription/argument_non_input_type.rs:17:29
   |
17 |     async fn id(&self, obj: ObjA) -> BoxStream<'static, &'static str> {
   |                             ^^^^ the trait `FromInputValue<__S>` is not implemented for `ObjA`
   |
   = help: the following other types implement trait `FromInputValue<S>`:
             `Arc<T>` implements `FromInputValue<S>`
             `Box<T>` implements `FromInputValue<S>`
             `ID` implements `FromInputValue<__S>`
             `TypeKind` implements `FromInputValue<__S>`
             `Vec<T>` implements `FromInputValue<S>`
             `[T; N]` implements `FromInputValue<S>`
             `bool` implements `FromInputValue<__S>`
             `f64` implements `FromInputValue<__S>`
           and $N others
